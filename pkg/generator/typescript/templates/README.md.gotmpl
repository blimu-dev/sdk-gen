# {{ .Client.Name }} TypeScript SDK

This is an auto-generated TypeScript/JavaScript SDK for the {{ .Client.Name }} API.

## Installation

```bash
npm install {{ .Client.PackageName }}
# or
yarn add {{ .Client.PackageName }}
```

## Quick Start

```typescript
import { {{ pascal .Client.Name }}Client } from '{{ .Client.PackageName }}';

// Create a new client
const client = new {{ pascal .Client.Name }}Client({
  baseURL: 'https://api.example.com',
  timeoutMs: 10000,
  retry: { retries: 2, backoffMs: 300, retryOn: [429, 500, 502, 503, 504] },
  // Environment-based baseURL (optional)
  env: 'sandbox',
  envBaseURLs: { sandbox: 'https://api-sandbox.example.com', production: 'https://api.example.com' },
  // Auth (generic API Key or Bearer header)
  accessToken: process.env.API_TOKEN,
  headerName: 'access_token', // or 'Authorization' (defaults to Authorization: Bearer <token>)
});

{{- range .IR.Services }}
{{- if gt (len .Operations) 0 }}
{{- $firstOp := index .Operations 0 }}
// Example: {{ $firstOp.Summary }}
try {
  const result = await client.{{ serviceProp .Tag }}.{{ methodName $firstOp }}(
    {{- range pathParamsInOrder $firstOp }}'{{ .Name }}'{{ if not (eq . (index (pathParamsInOrder $firstOp) (sub (len (pathParamsInOrder $firstOp)) 1))) }}, {{ end }}{{ end }}
    {{- if $firstOp.QueryParams }}{{ if pathParamsInOrder $firstOp }}, {{ end }}{
      {{- range $firstOp.QueryParams }}
      {{- if .Required }}
      {{ .Name }}: {{ if eq .Schema.Kind "string" }}'example'{{ else if eq .Schema.Kind "integer" }}123{{ else if eq .Schema.Kind "boolean" }}true{{ else }}undefined{{ end }},
      {{- end }}
      {{- end }}
    }{{ end }}
    {{- if $firstOp.RequestBody }}{{ if or (pathParamsInOrder $firstOp) $firstOp.QueryParams }}, {{ end }}{
      // Request body data
    }{{ end }}
  );
  console.log('Result:', result);
} catch (error) {
  // ApiError with structured data
  console.error(error);
}
{{- break }}
{{- end }}
{{- end }}
```

## Environment & Auth

```typescript
const client = new {{ pascal .Client.Name }}Client({
  env: 'sandbox',
  envBaseURLs: { sandbox: 'https://api-sandbox.example.com', production: 'https://api.example.com' },
  accessToken: async () => process.env.API_TOKEN!,
  headerName: 'access_token',
});
client.setAccessToken('new-token');
```

## Pagination

```typescript
import { listAll } from '{{ .Client.PackageName }}';

const allPayments = await listAll(
  (query) => client.payment.listPayments(query),
  { limit: 100 },
);
```

## Interceptors

```typescript
const client = new {{ pascal .Client.Name }}Client({
  onRequest: ({ url, init }) => console.debug('->', init.method, url),
  onResponse: ({ response }) => console.debug('<-', response.status),
  onError: (err) => console.warn('request error', err),
});
```

## Authentication

This SDK supports the following authentication methods:

{{- range .IR.SecuritySchemes }}
### {{ pascal .Key }}
{{- if eq .Type "http" }}
{{- if eq .Scheme "bearer" }}

Bearer token authentication:

```typescript
const client = new {{ pascal $.Client.Name }}Client({
  {{ camel .Key }}: 'your-bearer-token',
});
```
{{- else if eq .Scheme "basic" }}

Basic authentication:

```typescript
const client = new {{ pascal $.Client.Name }}Client({
  {{ camel .Key }}: {
    username: 'your-username',
    password: 'your-password',
  },
});
```
{{- end }}
{{- else if eq .Type "apiKey" }}

API Key authentication{{ if eq .In "header" }} (header){{ else if eq .In "query" }} (query parameter){{ end }}:

```typescript
const client = new {{ pascal $.Client.Name }}Client({
  {{ camel .Key }}: 'your-api-key',
});
```
{{- end }}
{{- end }}

## Subpath imports

```typescript
import { PaymentService, Schema } from '{{ .Client.PackageName }}';
```

## Available Services

{{- range .IR.Services }}
{{- if gt (len .Operations) 0 }}

### {{ serviceName .Tag }}

{{- range .Operations }}
- **{{ methodName . }}**: {{ .Method }} {{ .Path }}{{ if .Summary }} - {{ .Summary }}{{ end }}
{{- end }}
{{- end }}
{{- end }}

## TypeScript Support

This SDK is written in TypeScript and provides full type safety:

```typescript
import { {{ pascal .Client.Name }}Client, Schema } from '{{ .Client.PackageName }}';

const client = new {{ pascal .Client.Name }}Client({ /* config */ });

// All methods are fully typed
{{- range .IR.Services }}
{{- if gt (len .Operations) 0 }}
{{- $firstOp := index .Operations 0 }}
const result: {{ tsType $firstOp.Response.Schema | stripSchemaNs }} = await client.{{ serviceProp .Tag }}.{{ methodName $firstOp }}(/* ... */);
{{- break }}
{{- end }}
{{- end }}

// Schema types are available
{{- if .IR.ModelDefs }}
{{- $firstModel := index .IR.ModelDefs 0 }}
const data: Schema.{{ $firstModel.Name }} = {
  // Fully typed object
};
{{- end }}
```

## Node.js Usage

For Node.js environments, you may need to provide a fetch implementation:

```bash
npm install undici
```

```typescript
import { fetch } from 'undici';
import { {{ pascal .Client.Name }}Client } from '{{ .Client.PackageName }}';

const client = new {{ pascal .Client.Name }}Client({
  baseURL: 'https://api.example.com',
  fetch,
});
```

## Models and Types

{{- if .IR.ModelDefs }}

The SDK includes the following TypeScript interfaces:

{{- range .IR.ModelDefs }}
- **{{ .Name }}**{{ if .Annotations.Description }}: {{ .Annotations.Description }}{{ end }}
{{- end }}

All types are available under the `Schema` namespace:

```typescript
import { Schema } from '{{ .Client.PackageName }}';

// Use any model type
const user: Schema.User = { /* ... */ };
```
{{- end }}

## Contributing

This SDK is auto-generated. Please do not edit the generated files directly. 
If you find issues, please report them in the main project repository.

## License

This SDK is generated from the {{ .Client.Name }} API specification.
