import { CoreClient } from "../client";
import * as Schema from "../schema";

export class {{ serviceName .Service.Tag }} {
  constructor(private core: CoreClient) {}
  
  {{- range .Service.Operations }}

  /**
   * {{ .Method }} {{ .Path }}
   {{- if .Summary }}
   * @summary {{ .Summary | replace "*/" "*\\/" }}
   {{- else if .Response.Description }}
   * @returns {{ .Response.Description | replace "*/" "*\\/" }}
   {{- end }}
   {{- if .Description }}
   *
   * @description {{ .Description | replace "*/" "*\\/" }}
   {{- end }}
   */

  
  {{- $method := methodName . -}}
  {{- $pathParams := .PathParams -}}
  {{- $queryParams := .QueryParams -}}
  {{- $req := .RequestBody -}}
  {{- $resp := .Response -}}

  {{""}}
  {{ $method }}(
    {{- $params := methodSignature . -}}
    {{ range $i, $param := $params }}
    {{ $param }}{{ if lt $i (sub (len $params) 1) }},{{ end -}}
    {{ end }}
  ): Promise<{{ tsType $resp.Schema }}> {
    return this.core.request({
      method: "{{ .Method }}",
      path: {{ pathTemplate . }},
      {{- if gt (len $queryParams) 0 }}
      query,
      {{- end }}
      {{- if $req }}
      headers: { ...(init?.headers || {}), "content-type": "{{ $req.ContentType }}" },
      body: {{ if eq $req.ContentType "application/json" }}JSON.stringify(body){{ else }}(body as any){{ end }},
      {{- end }}
      ...(init || {}),
    });
  }

  {{ if $.Client.IncludeQueryKeys }}
  {{ $args := queryKeyArgs . -}}
  /**
   * @summary Get query keys for {{ $method }}
   * @returns [{{ queryKeyBase . }}{{- range $a := $args }}, {{ $a }}{{- end }}]
   */
  {{ $method }}__queryKeys(
    {{- $paramsNoInit := methodSignatureNoInit . -}}
    {{- range $i, $param := $paramsNoInit }}
    {{ $param }}{{ if lt $i (sub (len $paramsNoInit) 1) }},{{ end -}}
    {{- end }}
  ) {
    {{ $args := queryKeyArgs . -}}
    return [{{ queryKeyBase . }}{{- range $a := $args }}, {{ $a }}{{- end }}] as const;
  }
  {{- end }}
  {{- end }}
}
